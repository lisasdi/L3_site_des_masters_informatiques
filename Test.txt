
# http://127.0.0.1:8050/ 

import dash
from dash import Dash, html, dcc,Input, Output
import plotly.express as px
import pandas as pd
import sqlite3
app = Dash(__name__,requests_pathname_prefix='/dashboard1/')



app.layout = html.Div([
    html.H1('Analysis '),
    html.Div([
    html.H3('Spam &ham selon score prediction et taille des messages '),
    dcc.Graph(id="graphpie"),
    html.P("Names:"),
    dcc.Dropdown(id='names',
        options=['type_msg'],
        value='type_msg', clearable=False
    ),
    html.P("Values:"),
    dcc.Dropdown(id='values',
        options=['score_conf', 'len_msg'],
        value='score_conf', clearable=False
    ),]),
    html.Div([
    html.H3('Nombre total de requetes et nombre de spam re√ßu '),
    dcc.Graph(id="graph")])
])


@app.callback(
    Output("graphpie", "figure"),
    Input("names", "value"), 
    Input("values", "value"))
def generate_chart(names, values):
    # Create your connection.
    cnx = sqlite3.connect('usersTest.db')

    df = pd.read_sql_query("SELECT * FROM Result_prediction ", cnx)
    fig = px.pie(df, values=values, names=names, hole=.3)
    fig.update_traces(textposition='inside', textinfo='percent+label')
    return fig
@app.callback(
    Output("graph", "figure"),
    Input("names", "value")   
)
def update_bar_chart(names):
    cnx = sqlite3.connect('usersTest.db')
    df = pd.read_sql_query("SELECT * FROM Result_prediction ", cnx)
    total_rows=len(df)
    nb_spam=df[df["type_msg"]=='spam'].shape[0]
    count=[total_rows,nb_spam]
    label=["Total","spam"]
    fig = px.bar(x=label,y=count,color=['Total','spam'],text_auto='.2s')
    return fig

if __name__ == '__main__':
    app.run(debug=True)
