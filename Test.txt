import dash
from dash import Dash, html, dcc, Input, Output
import plotly.express as px
import pandas as pd
import sqlite3
import dash_bootstrap_components as dbc  # Ajout de Bootstrap

app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP], requests_pathname_prefix='/dashboard1/')

# Mise en page améliorée avec Bootstrap
app.layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H1('Analyse des messages', className='text-center mb-4'), width=12)
    ]),
    
    dbc.Row([
        dbc.Col([
            html.H3('Spam & Ham selon le score de prédiction et la taille des messages', className='text-center mb-4'),
            dcc.Graph(id="graphpie"),
            html.P("Sélectionnez le type de message:", className="mt-2"),
            dcc.Dropdown(id='names',
                         options=[{'label': 'Type de message', 'value': 'type_msg'}],
                         value='type_msg', clearable=False, className='mb-2'
            ),
            html.P("Sélectionnez la métrique:", className="mt-2"),
            dcc.Dropdown(id='values',
                         options=[{'label': 'Score de confiance', 'value': 'score_conf'}, 
                                  {'label': 'Longueur du message', 'value': 'len_msg'}],
                         value='score_conf', clearable=False
            )
        ], width=6),
        
        dbc.Col([
            html.H3('Nombre total de requêtes et nombre de spams reçus', className='text-center mb-4'),
            dcc.Graph(id="graph"),
        ], width=6)
    ])
], fluid=True)

@app.callback(
    Output("graphpie", "figure"),
    Input("names", "value"), 
    Input("values", "value")
)
def generate_chart(names, values):
    # Connexion à la base de données
    cnx = sqlite3.connect('usersTest.db')
    df = pd.read_sql_query("SELECT * FROM Result_prediction", cnx)
    
    # Graphique en secteur (camembert)
    fig = px.pie(df, values=values, names=names, hole=.3, 
                 color_discrete_sequence=px.colors.sequential.RdBu)  # Couleur améliorée
    fig.update_traces(textposition='inside', textinfo='percent+label')
    fig.update_layout(title="Répartition des types de messages")
    return fig

@app.callback(
    Output("graph", "figure"),
    Input("names", "value")
)
def update_bar_chart(names):
    # Connexion à la base de données
    cnx = sqlite3.connect('usersTest.db')
    df = pd.read_sql_query("SELECT * FROM Result_prediction", cnx)
    
    total_rows = len(df)
    nb_spam = df[df["type_msg"] == 'spam'].shape[0]
    count = [total_rows, nb_spam]
    label = ["Total", "Spam"]
    
    # Graphique en barres
    fig = px.bar(x=label, y=count, color=label, text_auto='.2s', 
                 color_discrete_map={'Total': '#1f77b4', 'Spam': '#ff7f0e'})  # Couleur personnalisée
    fig.update_layout(title="Total des requêtes vs Nombre de spams", xaxis_title="Catégorie", yaxis_title="Nombre")
    return fig

if __name__ == '__main__':
    app.run(debug=True)
